AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Security Stack (single-account) - centralized S3 + config recorder + delivery channel + conformance pack uploader
  + SNS notifications + scheduled reporter. Includes lifecycle rules and hardened IAM policies.
  Tags all allowed resources with security-stack: "true".

Parameters:
  EmailAddress:
    Type: String
    Description: "Email address to subscribe to SNS for config reports (recipient must confirm subscription)."
  CentralBucketName:
    Type: String
    Default: !Sub "securitystack-config-${AWS::AccountId}-${AWS::Region}"
    Description: "Central S3 bucket name (must be globally unique)."
  ConformancePackS3Key:
    Type: String
    Default: "conformance-packs/security-best-practices.yaml"
    Description: "S3 key where the conformance pack YAML will be uploaded."
  ConformancePackName:
    Type: String
    Default: "SecurityBestPractices-Custom"
    Description: "Name used for the deployed Conformance Pack."

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: "Notifications" }
        Parameters: [EmailAddress]
      - Label: { default: "S3 / Conformance Pack" }
        Parameters: [CentralBucketName, ConformancePackS3Key, ConformancePackName]

Resources:

  ########################################
  # Central S3 bucket (SSE-S3) + lifecycle
  ########################################
  CentralConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CentralBucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: MoveToIA30Days
            Status: Enabled
            Prefix: ""
            Transition:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
            NoncurrentVersionTransitions:
              - StorageClass: STANDARD_IA
                NoncurrentDays: 30
            NoncurrentVersionExpirationInDays: 3650
          - Id: MoveToGlacier365Days
            Status: Enabled
            Prefix: ""
            Transition:
              - StorageClass: GLACIER
                TransitionInDays: 365
          - Id: ExpireAfter7Years
            Status: Enabled
            Prefix: ""
            ExpirationInDays: 2555
      Tags:
        - Key: security-stack
          Value: "true"
    DeletionPolicy: Retain

  # Minimal bucket policy allowing AWS Config service in THIS account/region to put objects
  CentralBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CentralConfigBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowConfigPut
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetBucketLocation
            Resource:
              - !Sub "${CentralConfigBucket.Arn}/*"
            Condition:
              # Ensure actions are only permitted from the same account (optional protective measure)
              ArnEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"

  ##################################################
  # Uploader Lambda role - scoped to bucket objects
  ##################################################
  UploaderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-uploader-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UploaderS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow writing the specific object/key(s) in the central bucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                Resource:
                  - !Sub "${CentralConfigBucket.Arn}/${ConformancePackS3Key}"
                  - !Sub "${CentralConfigBucket.Arn}/conformance-packs/*"

  ####################################################
  # Conformance pack uploader Lambda (custom resource)
  ####################################################
  ConformancePackUploaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-conformance-uploader"
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt UploaderLambdaRole.Arn
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          BUCKET: !Ref CentralConfigBucket
          KEY: !Ref ConformancePackS3Key
      Tags:
        - Key: security-stack
          Value: "true"
      Code:
        ZipFile: |
          import os, json, boto3, traceback, urllib.request
          s3 = boto3.client('s3')

          # Snapshot of AWS Security Best Practices conformance pack (representative).
          # Replace with official content if desired before deployment.
          CONFORMANCE_YAML = r"""
          # Security Best Practices - snapshot representative conformance pack
          Parameters: {}
          Resources:
            root-account-mfa-enabled:
              Type: AWS::Config::ConfigRule
              Properties:
                ConfigRuleName: root-account-mfa-enabled
                Source:
                  Owner: AWS
                  SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
            cloudtrail-enabled:
              Type: AWS::Config::ConfigRule
              Properties:
                ConfigRuleName: cloudtrail-enabled
                Source:
                  Owner: AWS
                  SourceIdentifier: CLOUD_TRAIL_ENABLED
            s3-bucket-public-read-prohibited:
              Type: AWS::Config::ConfigRule
              Properties:
                ConfigRuleName: s3-bucket-public-read-prohibited
                Source:
                  Owner: AWS
                  SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED
            iam-password-policy:
              Type: AWS::Config::ConfigRule
              Properties:
                ConfigRuleName: iam-password-policy
                InputParameters:
                  MinimumPasswordLength: '14'
                  RequireSymbols: 'true'
                  RequireNumbers: 'true'
                  RequireUppercaseCharacters: 'true'
                  RequireLowercaseCharacters: 'true'
                  MaxPasswordAge: '90'
                Source:
                  Owner: AWS
                  SourceIdentifier: IAM_PASSWORD_POLICY
          """

          def send_cfn_response(event, context, status, reason=None):
              response_body = {
                  'Status': status,
                  'Reason': reason or ('See CloudWatch Logs: ' + context.log_stream_name),
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event.get('StackId'),
                  'RequestId': event.get('RequestId'),
                  'LogicalResourceId': event.get('LogicalResourceId'),
                  'Data': {}
              }
              data = json.dumps(response_body).encode('utf-8')
              req = urllib.request.Request(event['ResponseURL'], data=data, method='PUT')
              req.add_header('Content-Type', '')
              req.add_header('Content-Length', str(len(data)))
              try:
                  urllib.request.urlopen(req)
              except Exception as e:
                  print("Failed sending CFN response:", e)

          def handler(event, context):
              try:
                if event['RequestType'] in ('Create', 'Update'):
                  bucket = os.environ['BUCKET']
                  key = os.environ['KEY']
                  s3.put_object(Bucket=bucket, Key=key, Body=CONFORMANCE_YAML.encode('utf-8'))
                  print(f"Uploaded conformance pack to s3://{bucket}/{key}")
                  send_cfn_response(event, context, "SUCCESS")
                else:
                  # Delete - no-op to preserve artifact
                  send_cfn_response(event, context, "SUCCESS")
              except Exception as e:
                traceback.print_exc()
                send_cfn_response(event, context, "FAILED", reason=str(e))

  ConformancePackUploaderCustom:
    Type: Custom::ConformanceUploader
    Properties:
      ServiceToken: !GetAtt ConformancePackUploaderFunction.Arn
    DependsOn:
      - ConformancePackUploaderFunction

  ####################################################
  # Config service role (scoped to service-role managed policy)
  ####################################################
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-config-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole

  ####################################################
  # Configuration Recorder (records all supported & global types)
  ####################################################
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: default
      RoleARN: !GetAtt ConfigServiceRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
    DependsOn: ConfigServiceRole

  ####################################################
  # SNS topic and subscription (email)
  ####################################################
  ConfigNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "ConfigNotifications-${AWS::AccountId}"
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress
      Tags:
        - Key: security-stack
          Value: "true"

  ####################################################
  # Delivery Channel - writes to central S3 and SNS
  ####################################################
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      Name: default
      S3BucketName: !Ref CentralConfigBucket
      S3KeyPrefix: config-delivery
      SnsTopicARN: !Ref ConfigNotificationsTopic
    DependsOn:
      - ConformancePackUploaderCustom

  ####################################################
  # Lambda to start the recorder - limited policy to account/region
  ####################################################
  StartRecorderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-start-recorder-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StartRecorderPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # config:StartConfigurationRecorder cannot be restricted to a precise ARN in some regions/APIs
              # We scope it to this account/region using a "starts-with" style with the config resource prefix.
              - Effect: Allow
                Action:
                  - config:StartConfigurationRecorder
                  - config:DescribeConfigurationRecorders
                Resource: !Sub "arn:aws:config:${AWS::Region}:${AWS::AccountId}:*"

  StartRecorderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-start-config-recorder"
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt StartRecorderRole.Arn
      Timeout: 60
      MemorySize: 128
      Code:
        ZipFile: |
          import json, boto3, urllib.request, traceback
          cfg = boto3.client('config')

          def send_cfn_response(event, context, status, reason=None):
              response_body = {
                  'Status': status,
                  'Reason': reason or ('See CloudWatch Logs: ' + context.log_stream_name),
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event.get('StackId'),
                  'RequestId': event.get('RequestId'),
                  'LogicalResourceId': event.get('LogicalResourceId'),
                  'Data': {}
              }
              data = json.dumps(response_body).encode('utf-8')
              req = urllib.request.Request(event['ResponseURL'], data=data, method='PUT')
              req.add_header('Content-Type', '')
              req.add_header('Content-Length', str(len(data)))
              try:
                  urllib.request.urlopen(req)
              except Exception as e:
                  print("Failed sending CFN response:", e)

          def handler(event, context):
              try:
                if event['RequestType'] in ('Create', 'Update'):
                  cfg.start_configuration_recorder(ConfigurationRecorderName='default')
                  send_cfn_response(event, context, "SUCCESS")
                else:
                  send_cfn_response(event, context, "SUCCESS")
              except Exception as e:
                traceback.print_exc()
                send_cfn_response(event, context, "FAILED", reason=str(e))
    Tags:
      - Key: security-stack
        Value: "true"

  StartRecorderCustom:
    Type: Custom::StartConfigRecorder
    Properties:
      ServiceToken: !GetAtt StartRecorderFunction.Arn
    DependsOn:
      - ConfigDeliveryChannel

  ####################################################
  # Conformance Pack resource (points to uploaded S3 object)
  ####################################################
  SecurityBestPracticesConformancePack:
    Type: AWS::Config::ConformancePack
    Properties:
      ConformancePackName: !Ref ConformancePackName
      TemplateS3Uri: !Sub "s3://${CentralConfigBucket}/${ConformancePackS3Key}"
    DependsOn:
      - ConformancePackUploaderCustom
      - ConfigDeliveryChannel
    Metadata:
      Comment: "Uses the uploaded YAML in S3 as the template for the conformance pack."

  ####################################################
  # Reporter Lambda (scoped permissions)
  ####################################################
  ReporterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-reporter-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReporterPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Limit Config read access to this specific conformance pack where possible.
              - Effect: Allow
                Action:
                  - config:GetConformancePackComplianceSummary
                  - config:DescribeConformancePacks
                  - config:GetConformancePackComplianceDetails
                Resource:
                  - !Sub "arn:aws:config:${AWS::Region}:${AWS::AccountId}:conformance-pack/${ConformancePackName}"
              - Effect: Allow
                Action:
                  - sns:ListSubscriptionsByTopic
                  - sns:Publish
                Resource:
                  - !Ref ConfigNotificationsTopic

  ReporterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-conformance-reporter"
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt ReporterRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          TOPIC_ARN: !Ref ConfigNotificationsTopic
          PACK_NAME: !Ref ConformancePackName
          CENTRAL_BUCKET: !Ref CentralConfigBucket
          REPORT_EMAIL: !Ref EmailAddress
      Tags:
        - Key: security-stack
          Value: "true"
      Code:
        ZipFile: |
          import boto3, os, json, traceback
          cfg = boto3.client('config')
          sns = boto3.client('sns')

          def get_confirmed_email_subscription(topic_arn, email):
            try:
              paginator = sns.get_paginator('list_subscriptions_by_topic')
              for page in paginator.paginate(TopicArn=topic_arn):
                for s in page.get('Subscriptions', []):
                  if s.get('Protocol') == 'email' and s.get('Endpoint') == email:
                    # SubscriptionArn is "PendingConfirmation" until confirmed
                    if s.get('SubscriptionArn') and s.get('SubscriptionArn') != 'PendingConfirmation':
                      return True
            except Exception as e:
              print("Error listing subscriptions:", str(e))
            return False

          def handler(event, context):
            topic = os.environ['TOPIC_ARN']
            pack_name = os.environ['PACK_NAME']
            email = os.environ.get('REPORT_EMAIL')
            if not email:
              print("No REPORT_EMAIL provided; exiting")
              return {"status":"no-email"}

            # Try to retrieve conformance pack compliance summary
            try:
              resp = cfg.get_conformance_pack_compliance_summary(ConformancePackName=pack_name)
              summary = resp.get('ConformancePackComplianceSummaryList', [])
            except Exception as e:
              print("Error fetching conformance summary:", str(e))
              summary = []

            confirmed = get_confirmed_email_subscription(topic, email)
            if not confirmed:
              print(f"Email {email} subscription not confirmed. Skipping publish.")
              return {"status":"not-confirmed"}

            s3_link = f"s3://{os.environ.get('CENTRAL_BUCKET')}/"
            body = f"AWS Config Conformance Pack Report\n\nConformance Pack: {pack_name}\n\nSummary:\n{json.dumps(summary, indent=2, default=str)}\n\nFull results (S3): {s3_link}"
            try:
              sns.publish(TopicArn=topic, Subject=f"Config Conformance Summary - {pack_name}", Message=body)
              print("Published report via SNS")
            except Exception as e:
              traceback.print_exc()
              print("Publish failed:", str(e))
            return {"status":"published" if confirmed else "not-published"}

  ReporterPermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ReporterFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com

  ReporterSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-daily-reporter"
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ReporterFunction.Arn
          Id: ReporterTarget
    DependsOn:
      - ReporterFunction

  ReporterSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ReporterFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ReporterSchedule.Arn

Outputs:
  CentralBucketName:
    Description: "Name of central S3 bucket"
    Value: !Ref CentralConfigBucket
  ConformancePackS3Uri:
    Description: "S3 URI to uploaded conformance pack YAML"
    Value: !Sub "s3://${CentralConfigBucket}/${ConformancePackS3Key}"
  SNSReportTopicArn:
    Description: "SNS Topic ARN used to send notification emails"
    Value: !Ref ConfigNotificationsTopic
  ConformancePackName:
    Description: "Conformance pack name"
    Value: !Ref ConformancePackName
